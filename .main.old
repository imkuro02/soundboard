import os
import pulsectl
import serial
import threading
import serial
from time import sleep

pulse = pulsectl.Pulse('my-client-name')

VIRT_MIC_MONITOR = 'PogXlr.monitor'
VIRT_MIC= 'PogXlr'

def get_default_mic():
    for mic in pulse.source_list():
        if pulse.server_info().default_source_name in mic.name:
            return(mic.name)

def get_default_speaker():
        return(pulse.server_info().default_sink_name)

DEFAULT_SPEAKER = get_default_speaker()
print(DEFAULT_SPEAKER)
DEFAULT_MIC = get_default_mic()


def mute_mic(mute):
    os.system(f'pacmd set-source-mute {DEFAULT_MIC} {mute}')

def listen():
    players = []

    def play_sound(player_id, sound):
        print(f'playing {sound}')
        mute_mic(1)
        os.system(f'paplay {sound} -d {VIRT_MIC} & paplay {sound} -d {DEFAULT_SPEAKER}')
        players.remove(player_id)
        if len(players) == 0:
            mute_mic(0)



    serialPort = serial.Serial(
        port="/dev/ttyUSB0", baudrate=9600, bytesize=8, timeout=2, stopbits=serial.STOPBITS_ONE
    )
    serialString = ""  # Used to hold data coming over UART
    while 1:
        sleep(.05)
        # Wait until there is data waiting in the serial buffer
        if serialPort.in_waiting > 0:
            # Read data out of the buffer until a carraige return / new line is found
            serialString = serialPort.readline()
            # Print the contents of the serial data
            try:
                output = serialString.decode("Ascii")
                if len(output) != 0:
                    sound = 'bruh.wav'
                    if '1' in output : sound = 'bruh.wav'
                    if '2' in output : sound = 'fart.wav'
                    player_id = len(players)
                    t = threading.Thread(target = play_sound, args = (player_id,sound,))                   
                    players.append(player_id)
                    t.start()

            except:
                pass


def main():
    os.system(f'pacmd load-module module-loopback source={DEFAULT_MIC} sink={VIRT_MIC}')
    #os.system(f'pacmd set-default-source {VIRT_MIC_MONITOR}')
    listen()

if __name__ == '__main__':
    # ./create_sink.sh

    main()

    # pulsaudio -k
    #play_sound()

